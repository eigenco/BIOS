; System BIOS at F000:0000 - F000:FFFF
;
; What works
;  MS-DOS 6.22
;  Supaplex
;  Prince of persia

;%define ATA 0x1f0
%define ATA 0x1F0

%macro outp 2
	mov     dx, %1
	mov     al, %2
	out     dx, al
%endmacro

%macro delay 0
	mov		cx, 255
%%d_wait:
	nop
	loop	%%d_wait
%endmacro

	cpu     186

start:
	; WaitForKey();
	outp    0x279, 2
	outp    0xA79, 2

	; SendKey();
	outp    0x279, 0
	outp    0x279, 0
	outp    0x279, 0x6A
	outp    0x279, 0xB5
	outp    0x279, 0xDA
	outp    0x279, 0xED
	outp    0x279, 0xF6
	outp    0x279, 0xFB
	outp    0x279, 0x7D
	outp    0x279, 0xBE
	outp    0x279, 0xDF
	outp    0x279, 0x6F
	outp    0x279, 0x37
	outp    0x279, 0x1B
	outp    0x279, 0x0D
	outp    0x279, 0x86
	outp    0x279, 0xC3
	outp    0x279, 0x61
	outp    0x279, 0xB0
	outp    0x279, 0x58
	outp    0x279, 0x2C
	outp    0x279, 0x16
	outp    0x279, 0x8B
	outp    0x279, 0x45
	outp    0x279, 0xA2
	outp    0x279, 0xD1
	outp    0x279, 0xE8
	outp    0x279, 0x74
	outp    0x279, 0x3A
	outp    0x279, 0x9D
	outp    0x279, 0xCE
	outp    0x279, 0xE7
	outp    0x279, 0x73
	outp    0x279, 0x39

	; Wake(0);
	outp    0x279, 3
	outp    0xA79, 0
	delay

	; WriteCsn(1);
	outp    0x279, 6
	outp    0xA79, 1
	delay

	; Wake(1);
	outp    0x279, 3
	outp    0xA79, 1
	delay

	; WriteByte(7, 3);
	outp    0x279, 7
	outp    0xA79, 3

	; reg[0x30] = 0x01;
	outp    0x279, 0x30
	outp    0xA79, 0x01

	; reg[0x60] = 0x0170;
	outp    0x279, 0x61
	outp    0xA79, 0x70
	outp    0x279, 0x60
	outp    0xA79, 0x01

	; reg[0x62] = 0x0376;
	outp    0x279, 0x63
	outp    0xA79, 0x76
	outp    0x279, 0x62
	outp    0xA79, 0x03

	cli
	xor     di, di
	mov     es, di
	mov     cx, 0x1F
blints:
	mov     ax, blank
	stosw
	mov     ax, cs
	stosw
	loop	blints
	mov     word [es:0x08*4], int8
	mov     word [es:0x09*4], int9
	mov     word [es:0x12*4], int12
	mov     word [es:0x13*4], int13
	mov     word [es:0x16*4], int16
	sti

;;;; BIOS DATA AREA ;;;;

	mov		di, 0x40
	mov		es, di
	mov		word [es:0x1A], 0x1E
	
;;;; 8042 KEYBOARD CONTROLLER ;;;;

	mov     al, 0xF0
	out     0x60, al
	mov     al, 1
	out     0x60, al
	
;;;; 8259 PROGRAMMABLE INTERRUPT CONTROLLER (PIC) ;;;;

	mov		al, 16
	out		0x20, al
	mov		al, 8
	out		0x21, al
	xor		al, al	
	out		0x21, al
	xor		al, al
	out		0x21, al

;;;; 8253 TIMER ;;;;

	mov		al, 0x36
	out		0x43, al
	xor		al, al        ; 18.2 Hz
	out		0x40, al
	out		0x40, al

;;;; LOAD ROM EXTENSIONS ;;;;

	call	0xC000:3      ; VGA BIOS

;;;; LOAD BOOT SECTOR ;;;;
	
	xor		ax, ax
	mov		es, ax
	mov		ds, ax
	mov     ax, 0x0201
	mov     bx, 0x7C00
	mov     cx, 1
	mov     dx, 0x0080
	int     0x13
	
	jmp     0:0x7C00
	
;;;; TIMER INTERRUPT ;;;;

int8:
	push	ax
	mov		al, 0x20
	out		0x20, al
	pop		ax
	iret

;;;; CONVENTIONAL MEMORY ;;;;

int12:
	mov		ax, 640
	iret

;;;; KEYBOARD INTERRUPTS ;;;;

int9:
	push	ax
	push	es
	push	di
	mov		di, 0x40
	mov		es, di
	in      al, 0x60
	cmp		al, 0xB6
	jne		notrshftu	
	mov		[es:0x17], byte 0
	jmp		nobuff
notrshftu:
	cmp		al, 0x36
	jne		notrshft	
	mov		[es:0x17], byte 1
	jmp		nobuff
notrshft:
	cmp		al, 0x80
	jae		nobuff
	inc		word [es:0x1A]
	mov		di, [es:0x1A]	
	mov		byte [es:di], al
nobuff:
	mov     al, 1
	out     0x64, al
	mov		al, 0x20
	out		0x20, al
	pop		di
	pop		es
	pop		ax
    iret
int16:
    push	es
	push	di
	mov		di, 0x40
	mov		es, di
	cmp     ah, 0
    je      getkey
    cmp     ah, 1
    je      checkkey	
	pop		di
	pop		es
    iret
getkey:
	cli
	cmp		word [es:0x1A], 0x1E
	sti
	jne		readkey	
	jmp		getkey
readkey:
	mov		di, [es:0x1A]
	mov		al, [es:di]
	dec		word [es:0x1A]
	mov		bx, cs
	mov		ds, bx
	mov		bx, ascii
	xlat
	pop		di
	pop		es
	iret
checkkey:	
	cli
	cmp		word [es:0x1A], 0x1E
	sti
	je		nokey
	mov		bl, 0
	mov		bh, 1
	cmp		bh, bl	
	pop		di
	pop		es
	retf	2
nokey:		
	pop		di
	pop		es	
	iret
ascii:
	db       0  ; 00
	db       1  ; 01
	db      '1' ; 02
	db      '2' ; 03
	db      '3' ; 04
	db      '4' ; 05
	db      '5' ; 06
	db      '6' ; 07
	db      '7' ; 08
	db      '8' ; 09
	db      '9' ; 0A
	db      '0' ; 0B
	db       12 ; 0C
	db      '=' ; 0D
	db     0x08 ; 0E <BACKSPACE>
	db       15 ; 0F
	db      'q' ; 10
	db      'w' ; 11
	db      'e' ; 12
	db      'r' ; 13
	db      't' ; 14
	db      'y' ; 15
	db      'u' ; 16
	db      'i' ; 17
	db      'o' ; 18
	db      'p' ; 19
	db       26 ; 1A
	db       27 ; 1B
	db     0x0D ; 1C <ENTER>
	db       29 ; 1D
	db      'a' ; 1E
	db      's' ; 1F
	db      'd' ; 20
	db      'f' ; 21
	db      'g' ; 22
	db      'h' ; 23
	db      'j' ; 24
	db      'k' ; 25
	db      'l' ; 26
	db       39 ; 27
	db       40 ; 28
	db       41 ; 29
	db       42 ; 2A
	db      '\' ; 2B
	db      'z' ; 2C
	db      'x' ; 2D
	db      'c' ; 2E
	db      'v' ; 2F
	db      'b' ; 30
	db      'n' ; 31
	db      'm' ; 32
	db      ',' ; 33
	db      '.' ; 34
	db      '/' ; 35
	db      0xFF; 36 <SHIFT>
	db       55 ; 37
	db       56 ; 38
	db      ' ' ; 39 <SPACE>
	db		  0 ; 3A
	db        0 ; 3B
	db        0 ; 3C
	db        0 ; 3D
	db        0 ; 3E
	db        0 ; 3F
	db        0 ; 40
	db        0 ; 41
	db        0 ; 42
	db        0 ; 43
	db        0 ; 44
	db        0 ; 45
	db        0 ; 46
	db        0 ; 47
	db      0xFF; 48 <UP>
	db        0 ; 49
	db        0 ; 4A
	db      0xFF; 4B <LEFT>
	db        0 ; 4C
	db      0xFF; 4D <RIGHT>
	db        0 ; 4E
	db        0 ; 4F
	db      0xFF; 50 <DOWN>

;;;; DISK INTERRUPT ;;;;

int13:
	cmp     ah, 2
	je      read_disk
	cmp     ah, 3
	je      write_disk
	cmp     ah, 8
	je      disk_type
	iret
read_disk:
	push	ax
	push	bx
	push	cx
	push	dx
	push	di
	push	si
	
	mov     di, bx                     ; destination = es:bx
	mov		si, ax                     ; # of sectors to read
	
	;;;;;;;;
	
	mov		bx, cx
	and		bx, 63		               ; sector is now in bx
	
	shr		cl, 6
	xchg	cl, ch                     ; cylinder is now in cx
	
	mov		dl, dh
	and		dx, 0x0F                   ; head is now in dx

	; LBA = (cylinder * TOTAL_HEADS + head) * SECTORS_PER_CYL + sector - 1
	
	mov		ax, cx                     ; ax = cylinder
	shl     ax, 4                      ; ax = ax * 16
	add     ax, dx                     ; ax = ax + head
	mov     dx, 63
	mul     dx                         ; dx:ax = ax * 63
	dec     bx
	clc
	adc     ax, bx
	adc     dx, 0
	mov     bx, ax                     ; dx:ax = dx:ax + sector - 1	
	mov     cx, dx

	mov		al, ch                     ; al = LBA[27:24]
	or		al, 0xE0
	mov     dx, ATA+6
	out     dx, al	

	mov		ax, si                     ; # of sectors to read
	mov     dx, ATA+2
	out     dx, al
	
	mov		al, bl                     ; al = LBA[7:0]
	mov     dx, ATA+3
	out     dx, al

	mov		al, bh                     ; al = LBA[15:8]
	mov     dx, ATA+4
	out     dx, al
	
	mov     al, cl                     ; al = LBA[23:16]
	mov     dx, ATA+5
	out		dx, al
	
	;;;;;;;;
	
	mov     al, 0x20                   ; read
	mov		dx, ATA+7
	out     dx, al
	
	mov		bx, si                     ; # of sectors to read
r_sector_loop:
	in		al, dx
	test	al, 8
	jz		r_sector_loop
	and		dx, 0xFF0
	mov		cx, 256
r_word_loop:
	in		ax, dx
	stosw
	loop	r_word_loop
	or		dx, 7
	dec		bl
	jnz		r_sector_loop
	
	pop		si
	pop     di
	pop     dx
	pop     cx
	pop		bx
	pop		ax
	iret

write_disk:
	push	ds
	push	ax
	push	bx
	push	cx
	push	dx
	push	di
	push	si
	
	mov		si, es
	mov		ds, si
	mov     si, bx                     ; destination = es:bx
	mov		di, ax                     ; # of sectors to write

	;;;;;;;;
	
	mov		bx, cx
	and		bx, 63		               ; sector is now in bx
	
	shr		cl, 6
	xchg	cl, ch                     ; cylinder is now in cx
	
	mov		dl, dh
	and		dx, 0x0F                   ; head is now in dx

	; LBA = (cylinder * TOTAL_HEADS + head) * SECTORS_PER_CYL + sector - 1
	
	mov		ax, cx                     ; ax = cylinder
	shl     ax, 4                      ; ax = ax * 16
	add     ax, dx                     ; ax = ax + head
	mov     dx, 63
	mul     dx                         ; dx:ax = ax * 63
	dec     bx
	clc
	adc     ax, bx
	adc     dx, 0
	mov     bx, ax                     ; dx:ax = dx:ax + sector - 1	
	mov     cx, dx

	mov		al, ch                     ; al = LBA[27:24]
	or		al, 0xE0
	mov     dx, ATA+6
	out     dx, al	

	mov		ax, di                     ; # of sectors to write
	mov     dx, ATA+2
	out     dx, al
	
	mov		al, bl                     ; al = LBA[7:0]
	mov     dx, ATA+3
	out     dx, al

	mov		al, bh                     ; al = LBA[15:8]
	mov     dx, ATA+4
	out     dx, al
	
	mov     al, cl                     ; al = LBA[23:16]
	mov     dx, ATA+5
	out		dx, al
	
	;;;;;;;;
	
	mov     al, 0x30                   ; write
	mov		dx, ATA+7
	out     dx, al
	
	mov		bx, di                     ; # of sectors to write
w_sector_loop:
	in		al, dx
	test	al, 8
	jz		w_sector_loop
	and		dx, 0xFF0
	mov		cx, 256
w_word_loop:
	lodsw
	out		dx, ax
	loop	w_word_loop
	or		dx, 7
	dec		bl
	jnz		w_sector_loop
	
	pop		si
	pop     di
	pop     dx
	pop     cx
	pop		bx
	pop		ax
	pop		ds
	iret
disk_type:
    ; 1024 cylinders, 16 heads, 63 sectors per cylinder
	mov     cx, 0xFF3F
	mov     dx, 0x0F01
blank:
	iret

times	0xFA6E-($-$$) db 0xFF

CGAFONT:
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e
	db 0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e
	db 0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00
	db 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00
	db 0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c
	db 0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c
	db 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00
	db 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff
	db 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00
	db 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff
	db 0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78
	db 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18
	db 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0
	db 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0
	db 0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99
	db 0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00
	db 0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00
	db 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18
	db 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00
	db 0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00
	db 0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78
	db 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00
	db 0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff
	db 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00
	db 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00
	db 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00
	db 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00
	db 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00
	db 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00
	db 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00
	db 0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00
	db 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00
	db 0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00
	db 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00
	db 0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00
	db 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00
	db 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00
	db 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00
	db 0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60
	db 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00
	db 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00
	db 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00
	db 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00
	db 0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00
	db 0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00
	db 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00
	db 0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00
	db 0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00
	db 0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00
	db 0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00
	db 0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00
	db 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00
	db 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60
	db 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00
	db 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00
	db 0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00
	db 0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00
	db 0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00
	db 0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00
	db 0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00
	db 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00
	db 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00
	db 0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00
	db 0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00
	db 0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00
	db 0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00
	db 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00
	db 0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00
	db 0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00
	db 0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00
	db 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00
	db 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00
	db 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00
	db 0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00
	db 0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00
	db 0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00
	db 0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00
	db 0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00
	db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00
	db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00
	db 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00
	db 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00
	db 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00
	db 0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00
	db 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00
	db 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00
	db 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00
	db 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff
	db 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00
	db 0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00
	db 0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00
	db 0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00
	db 0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00
	db 0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00
	db 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8
	db 0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00
	db 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00
	db 0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78
	db 0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00
	db 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00
	db 0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00
	db 0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00
	db 0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00
	db 0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0
	db 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e
	db 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00
	db 0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00
	db 0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00
	db 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00
	db 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00
	db 0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00
	db 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00
	db 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8
	db 0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00
	db 0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00
	db 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00
	db 0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00
	db 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00

	times	0xFFF0-($-$$) db 0xFF

	jmp     0xF000:start

	dw		0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF
	db		0xFF