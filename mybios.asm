; 64k system BIOS at F000:0000 - F000:FFFF

%macro outw 2
	mov	dx, %1
	mov	ax, %2
	out	dx, ax
%endmacro

start:
	mov	bx, cs
	mov	ds, bx

;;;; load VGA registers ;;;;

	mov	si, MISCregs
	mov	dx, 0x3c2
	outsb

	mov	si, SEQregs
	mov	dx, 0x3c4
	mov	cx, 5
	rep	outsw

	mov	si, CRTCregs
	mov	dx, 0x3d4
	mov	cx, 26
	rep	outsw

	mov	si, GCregs
	mov	dx, 0x3ce
	mov	cx, 9
	rep	outsw

	mov	si, ACregs
	mov	dx, 0x3c0
	mov	cx, 42
	rep	outsb

	mov	dx, 0x3da
	in	al, dx
	mov	dx, 0x3c0
	mov	al, 0x20
	out	dx, al

;;;; load VGA palette ;;;;

	mov	si, PALETTE
	mov	cx, 16
loop0:
	mov	dx, 0x3c8
	outsw
	inc	dx
	outsb
	outsb
	loop	loop0

;;;; load VGA font ;;;;

	outw	0x3ce, 0x0005
	outw	0x3ce, 0x0406
	outw	0x3c4, 0x0402
	outw	0x3c4, 0x0604
	mov	si, VGAFONT
	mov	bx, 0xa000
	mov	es, bx
	xor	di, di
	mov	cx, 80*25*2
	rep	movsw
	outw	0x3c4, 0x0302
	outw	0x3c4, 0x0204
	outw	0x3ce, 0x1005
	outw	0x3ce, 0x0e06

;;;; setup interrupt handlers ;;;;

	xor	bx, bx
	mov	es, bx
	mov	cx, 0x1f
loop1:
	mov	bx, cx
	shl	bx, 2
	mov	word [es:bx], blank
	mov	word [es:bx+2], cs
	loop	loop1

	cli
	mov     word [es:0x08*4], int8
	mov     word [es:0x08*4+2], cs
	mov     word [es:0x09*4], int9
	mov     word [es:0x09*4+2], cs
	mov     word [es:0x10*4], int10
	mov     word [es:0x10*4+2], cs
	mov     word [es:0x12*4], int12
	mov     word [es:0x12*4+2], cs
	mov     word [es:0x13*4], int13
	mov     word [es:0x13*4+2], cs
	mov     word [es:0x16*4], int16
	mov     word [es:0x16*4+2], cs

;;;; configure PIC ;;;;

	mov	al, 00010001b
	out	0x20, al
	out	0xA0, al

	mov	al, 00001000b
	out	0x21, al
	out	0xA1, al

	mov	al, 00000100b
	out	0x21, al
	mov	al, 0x70
	out	0xA1, al

	mov	al, 00000001b
	out	0x21, al
	out	0xA1, al

	mov	al, 0
	out	0x21, al
	out	0xA1, al

	sti

;;;; configure PIT ;;;;

	mov	al, 00000100b
	out	0x43, al

	mov	al, 0xFF
	out	0x40, al

	mov	al, 0xFF
	out	0x40, al

;;;; configure KEYBOARD ;;;;

	mov	al, 0xF0 ; select scan code set
	out	0x60, al

	mov	al, 00000001b ; select XT set
	out	0x60, al

	mov	al, 0x60
	out	0x64, al

	mov	al, 00000101b
	out	0x64, al

;;;; testing ;;;;

	mov	ax, 0xB800
	mov	es, ax
	xor	di, di
	mov	al, '!'
	stosb
	mov	al, 7
	stosb

;	jmp	$

;;;; setup stack ;;;;

	mov	sp, 0x9000
	mov	ss, sp
	mov	sp, 0xfffe

;;;; load and execute boot sector ;;;;

	xor	ax, ax
	mov	es, ax
	mov	ax, 0x0201
	mov	bx, 0x7c00
	mov	cx, 1
	mov	dx, 0x0080
	int	0x13
	jmp	0:0x7c00

int8:
	mov	ah, 0x0e
	mov	al, '!'
	int	0x10
	mov	al, 0x20
	out	0x20, al
	iret

;;;; KEYBOARD INTERRUPT ;;;;

int9:
	mov	ah, 0x0e
	mov	al, '!'
	int	0x10
	in	al, 0x60
	mov	al, 0x20
	out	0x20, al
	iret

	push	es
	push	ax
	push	bx
	push	bp

	in      al, 0x60

        cmp     al, 0x80
        jae     no_add_buf
        cmp     al, 0x36
        je      no_add_buf
        cmp     al, 0x38
        je      no_add_buf
        cmp     al, 0x1d
        je      no_add_buf

        mov     bx, 0x40
        mov     es, bx

        mov     bh, al
        mov     al, [es:0x7f] ; this_keystroke?

        mov     bp, [es:0x1c]
        mov     byte [es:bp], al ; ASCII
        mov     byte [es:bp+1], bh ; scan

        add     word [es:0x1c], 2
        call    kb_adjust_buf

  no_add_buf:

        mov     al, 1
        out     0x64, al

        pop     bp
        pop     bx
        pop     ax
        pop     es

        iret

;;;; VGA BIOS ;;;;

int10:
	cmp	ah, 0x0e
	je	putchar
	iret
putchar:
	push	es
	push	di

	; load old cursor location from BIOS Data Area
	mov	bx, 0x40
	mov	es, bx
	mov	bx, 0x50
	mov	di, [es:bx]

	; write characters to VGA adapter
	mov	bx, 0xb800
	mov	es, bx
	mov	ah, 7
	stosw

	; store new cursor location to BIOS Data Area
	mov	bx, 0x40
	mov	es, bx
	mov	bx, 0x50
	mov	[es:bx], di

	pop	di
	pop	es
	iret

;;;; report conventional memory ;;;;

int12:
	mov	ax, 640
	iret

;;;; BIOS disk services ;;;;

int13:
	cmp	ah, 2
	je	read_disk
	cmp	ah, 8
	je	disk_type
	iret
read_disk:
	push	cx
	push	dx
	push	di

	mov	di, bx                 ; target = es:bx
	mov	bl, al                 ; sectors to read

	mov     al, dh                 ; head
	mov     dx, 0x1f6
	out     dx, al

	mov	al, bl                 ; sectors to read
	mov     dx, 0x1f2
	out     dx, al

	mov     al, cl                 ; sector
	mov     dx, 0x1f3
	out     dx, al

	mov     al, ch                 ; cylinder
	mov     dx, 0x1f4
	out     dx, al

	mov     al, 0x20               ; read (0x30 for write)
	mov     dx, 0x1f7
	out     dx, al
repeat:
	mov     dx, 0x1f7
processing:
	in      al, dx
	test    al, 8
	jz      processing
	mov     cx, 256
	mov     dx, 0x1f0
	rep     insw                   ; read cx words from port dx to es:di
	dec     bl
	jnz	repeat                 ; until sectors are read

	pop	di
	pop	dx
	pop	cx
	iret

disk_type:
        mov     ch, 64 ; cylinders (64)
	mov	cl, 63 ; sectors/track (63)
        mov     dh, 15 ; heads (16)
        mov     dl,  1 ; number of drives attached
	iret

int16:
        cmp     ah, 0x00
        je      kb_getkey
        cmp     ah, 0x01
        je      kb_checkkey
        iret

  kb_getkey:

        push    es
        push    bx
        push    cx
        push    dx

        mov     bx, 0x40
        mov     es, bx

    kb_gkblock:

        cli

        mov     cx, [es:0x1c]
        mov     bx, [es:0x1a]
        mov     dx, [es:bx]

        sti

        cmp     cx, bx
        je      kb_gkblock

        add     word [es:0x1a], 2
        call    kb_adjust_buf

        mov     ah, dh
        mov     al, dl

        pop     dx
        pop     cx
        pop     bx
        pop     es

        iret

  kb_checkkey:

        push    es
        push    bx
        push    cx
        push    dx

        mov     bx, 0x40
        mov     es, bx

        mov     cx, [es:0x1c]
        mov     bx, [es:0x1a]
        mov     dx, [es:bx]

        sti

        ; Check if there is a key in the buffer. ZF is set if there is none.
        cmp     cx, bx

        mov     ah, dh
        mov     al, dl

	pop     dx
        pop     cx
        pop     bx
        pop     es
	iret

kb_adjust_buf:

        push    ax
        push    bx

        mov     ax, [es:0x3e]
        cmp     [es:0x1a], ax
        jnge    kb_adjust_tail

        mov     bx, [es:0x1e]
        mov     [es:0x1a], bx

  kb_adjust_tail:

        mov     ax, [es:0x3e]
        cmp     [es:0x1c], ax
        jnge    kb_adjust_done

        mov     bx, [es:0x1e]
        mov     [es:0x1c], bx

  kb_adjust_done:

        pop     bx
        pop     ax
        ret

ascii:
	db       0,   1
	db      '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'
	db       12,  13,  14,  15
	db      'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'
	db       26,  27,  13,  29
	db      'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'
	db       39,  40,  41,  42,  43
	db      'z', 'x', 'c', 'v', 'b', 'n', 'm'
	db       51,  52,  53,  54,  55,  56
	db      ' '

blank:
	iret

;;;;;;;; ;;;;;;;; ;;;;;;;; ;;;;;;;;

MISCregs:
	db 0x67

SEQregs:
	dw 0x0000
	dw 0x0001
	dw 0x0302
	dw 0x0003
	dw 0x0704

CRTCregs:
	dw 0x0011
	dw 0x5f00
	dw 0x4f01
	dw 0x5002
	dw 0x8203
	dw 0x5504
	dw 0x8105
	dw 0xbf06
	dw 0x1f07
	dw 0x0008
	dw 0x4f09
	dw 0x0d0a
	dw 0x0e0b
	dw 0x000c
	dw 0x000d
	dw 0x010e
	dw 0xe00f
	dw 0x9c10
	dw 0x8e11
	dw 0x8f12
	dw 0x2813
	dw 0x1f14
	dw 0x9615
	dw 0xb916
	dw 0xa317
	dw 0xff18

GCregs:
	dw 0x0000
	dw 0x0001
	dw 0x0002
	dw 0x0003
	dw 0x0004
	dw 0x1005
	dw 0x0e06
	dw 0x0f07
	dw 0xff08

ACregs:
	dw 0x0000
	dw 0x0101
	dw 0x0202
	dw 0x0303
	dw 0x0404
	dw 0x0505
	dw 0x1406
	dw 0x0707
	dw 0x3808
	dw 0x3909
	dw 0x3a0a
	dw 0x3b0b
	dw 0x3c0c
	dw 0x3d0d
	dw 0x3e0e
	dw 0x3f0f
	dw 0x0c10
	dw 0x0011
	dw 0x0f12
	dw 0x0813
	dw 0x0014

PALETTE:
	db 0x00, 0x00, 0x00, 0x00
	db 0x01, 0x00, 0x00, 0x2a
        db 0x02, 0x00, 0x2a, 0x00
        db 0x03, 0x00, 0x2a, 0x2a
        db 0x04, 0x2a, 0x00, 0x00
        db 0x05, 0x2a, 0x00, 0x2a
        db 0x06, 0x2a, 0x15, 0x00
        db 0x07, 0x2a, 0x2a, 0x2a
        db 0x08, 0x15, 0x15, 0x15
        db 0x09, 0x15, 0x15, 0x3f
        db 0x0a, 0x15, 0x3f, 0x15
        db 0x0b, 0x15, 0x3f, 0x3f
        db 0x0c, 0x3f, 0x15, 0x15
        db 0x0d, 0x3f, 0x15, 0x3f
        db 0x0e, 0x3f, 0x3f, 0x15
        db 0x0f, 0x3f, 0x3f, 0x3f

VGAFONT:
	incbin "font.raw"

times	0xfa6e-($-$$) db 0

CGAFONT:
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e
	db 0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e
	db 0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00
	db 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00
	db 0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c
	db 0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c
	db 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00
	db 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff
	db 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00
	db 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff
	db 0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78
	db 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18
	db 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0
	db 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0
	db 0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99
	db 0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00
	db 0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00
	db 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18
	db 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00
	db 0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00
	db 0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78
	db 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00
	db 0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff
	db 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00
	db 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00
	db 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00
	db 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00
	db 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00
	db 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00
	db 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00
	db 0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00
	db 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00
	db 0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00
	db 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00
	db 0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00
	db 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00
	db 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00
	db 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00
	db 0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60
	db 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00
	db 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00
	db 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00
	db 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00
	db 0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00
	db 0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00
	db 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00
	db 0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00
	db 0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00
	db 0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00
	db 0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00
	db 0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00
	db 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00
	db 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60
	db 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00
	db 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00
	db 0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00
	db 0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00
	db 0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00
	db 0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00
	db 0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00
	db 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00
	db 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00
	db 0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00
	db 0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00
	db 0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00
	db 0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00
	db 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00
	db 0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00
	db 0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00
	db 0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00
	db 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00
	db 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00
	db 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00
	db 0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00
	db 0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00
	db 0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00
	db 0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00
	db 0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00
	db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00
	db 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00
	db 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00
	db 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00
	db 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00
	db 0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00
	db 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00
	db 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00
	db 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00
	db 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff
	db 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00
	db 0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00
	db 0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00
	db 0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00
	db 0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00
	db 0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00
	db 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8
	db 0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00
	db 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00
	db 0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78
	db 0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00
	db 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00
	db 0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00
	db 0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00
	db 0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00
	db 0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0
	db 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e
	db 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00
	db 0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00
	db 0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00
	db 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00
	db 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00
	db 0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00
	db 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00
	db 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8
	db 0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00
	db 0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00
	db 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00
	db 0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00
	db 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	db 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00

times   0xfff0-($-$$) db 0

	jmp     0xf000:start

times   0x10000-($-$$) db 0
